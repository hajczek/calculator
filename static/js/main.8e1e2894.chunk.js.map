{"version":3,"sources":["components/Form.js","components/Display.js","App.js","index.js"],"names":["Form","props","onClick","displayVal","id","className","disabled","Display","value","result","actual","App","e","preventDefault","target","firstChild","nodeValue","allAction","document","getElementById","finishResult","equals","decimal","disabledNum","querySelector","actOperators","equal","a","b","notEqual","nodeName","innerHTML","classList","remove","removeAttribute","some","state","all","textContent","previousSign","substr","length","newAllAction","replace","every","includes","setAttribute","attributes","setState","add","score","require","Parser","evaluate","toFixed","toString","shortScore","toPrecision","stopPropagation","this","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.8e1e2894.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Form(props) {\r\n  return (\r\n    <form onClick={props.displayVal}>\r\n      <button id=\"clear\" className=\"ac\">AC</button>\r\n      <button id=\"add\" className=\"small act\">+</button>\r\n      <button id=\"subtract\" className=\"small act\">-</button>\r\n      <button id=\"multiply\" className=\"small act\">*</button>\r\n      <button id=\"divide\" className=\"small act\">/</button>\r\n      <button id=\"seven\" className=\"small num\">7</button>\r\n      <button id=\"eight\" className=\"small num\">8</button>\r\n      <button id=\"nine\" className=\"small num\">9</button>\r\n      <button id=\"four\" className=\"small num\">4</button>\r\n      <button id=\"five\" className=\"small num\">5</button>\r\n      <button id=\"six\" className=\"small num\">6</button>\r\n      <button id=\"one\" className=\"small num\">1</button>\r\n      <button id=\"two\" className=\"small num\">2</button>\r\n      <button id=\"three\" className=\"small num\">3</button>\r\n      <button id=\"zero\" className=\"small num\">0</button>\r\n      <button id=\"decimal\" className=\"small act\">.</button>\r\n      <button id='equals' className=\"small equal\" disabled>=</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nfunction Display(props) {\r\n  return (\r\n    <div id=\"display\" className=\"result\" value=\"0\">\r\n      <p id=\"allAction\">{props.result}</p>\r\n      <p id=\"finishResult\">{props.actual}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport Display from './components/Display';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      result: 0,\n      actual: 0\n    }\n  }\n\n  displayVal = (e) => {\n\n    e.preventDefault();\n\n    // Defined handles\n    let value = e.target.firstChild.nodeValue;\n    let allAction = document.getElementById('allAction');\n    let finishResult = document.getElementById('finishResult');\n    let equals = document.getElementById('equals');\n    let decimal = document.getElementById('decimal');\n    let disabledNum = document.querySelector('[disabled=\"true\"]');\n\n    // Table with action operators\n    const actOperators = ['+', '-', '*', '/'];\n    // Function checks if all elements are equal\n    const equal = a => b => a === b;\n    // Function checks if all elements are not equal\n    const notEqual = a => b => a !== b;\n\n    // Check if clicked element is not a 'FORM'\n    if (e.target.nodeName !== 'FORM') {\n\n      // Set new value for 'allAction' field\n      allAction.innerHTML += value;\n\n      // Display last action sign in 'actual' and 'finish' fields\n      // Set value for fields 'allAction' and 'finishResult' to '0'\n      if (value === 'AC') {\n        allAction.innerHTML = 0;\n        finishResult.innerHTML = 0;\n\n        // Remove class 'clearAll' from fields 'allAction' and 'finishResult'\n        allAction.classList.remove('clearAll');\n        finishResult.classList.remove('clearAll');\n\n        // Remove disabled attribute if is on button with num \n        if (disabledNum) {\n          disabledNum.removeAttribute('disabled');\n        }\n      }\n      else if ((actOperators.some(equal(this.state.actual))\n        && actOperators.some(equal(value)))) {\n        // Handle for value in allAction field\n        let all = allAction.textContent;\n\n        // Handle for last two sign in allAction field\n        let previousSign = all.substr(all.length - 2, 2);\n\n        // Handle for new value in allAction field\n        let newAllAction = all.replace(previousSign, value);\n\n        // Set newAllAction as a value od allAction field\n        allAction.innerHTML = newAllAction;\n\n        // Set new value for 'finishResult' field\n        finishResult.innerHTML = value;\n\n        // Remove attribute disabled from 'equals' button\n        equals.removeAttribute('disabled');\n      }\n      // Display only action sign in 'actual' field\n      else if (actOperators.some(equal(this.state.actual))) {\n        // Set new value for 'finishResult' field\n        finishResult.innerHTML = value;\n\n        // Remove attribute disabled from 'equals' button\n        equals.removeAttribute('disabled');\n      }\n      // Set value for fields 'allAction' and 'finishResult' to '0'\n      else if (value === 'AC') {\n        allAction.innerHTML = 0;\n        finishResult.innerHTML = 0;\n\n        // Remove class 'clearAll' from fields 'allAction' and 'finishResult'\n        allAction.classList.remove('clearAll');\n        finishResult.classList.remove('clearAll');\n\n        // Remove disabled attribute if is on button with num \n        if (disabledNum) {\n          disabledNum.removeAttribute('disabled');\n        }\n      }\n      // Leave 0 if first clicked button is '.'\n      else if (value === '.'\n        && (this.state.result === 0 || this.state.result === '0')\n        && (this.state.actual === 0 || this.state.actual === '0')) {\n        // Add new value to field 'finishResult'\n        finishResult.innerHTML += value;\n      }\n      // Remove 0 if first clicked button is different than action button\n      else if ((this.state.result === 0 || this.state.result === '0')\n        && (this.state.actual === 0 || this.state.actual === '0')\n        && actOperators.every(notEqual(this.state.actual))) {\n        // Set new value for fields 'allAction' and 'finishResult'\n        allAction.innerHTML = value;\n        finishResult.innerHTML = value;\n      }\n      // Clear 0 from fields 'allAction' and 'finishResult' after click button with number\n      else if (allAction.textContent === '0'\n        && finishResult.textContent === '0'\n        && value !== '.'\n        && value !== 'AC'\n        && value !== '=') {\n        // Set new value for fields 'allAction' and 'finishResult'\n        allAction.innerHTML = value;\n        finishResult.innerHTML = value;\n      }\n      // Protection from add more signs '.' than one in number\n      else if (value === '.' && finishResult.textContent.includes('.')) {\n        // Set on button with decimal sign disabled attribute\n        decimal.setAttribute('disabled', 'true');\n\n        // Set result state value in 'allAction' field\n        allAction.innerHTML = this.state.result;\n      }\n      // Allows to set sign '.' in next number\n      else if (value === '.'\n        && finishResult.textContent.includes('.')\n        && this.state.result !== 0\n        && this.state.actual !== 0) {\n        // Set on button with decimal sign disabled attribute\n        decimal.setAttribute('disabled', 'true');\n\n        // Add new value to 'finishResult' field\n        finishResult.innerHTML += value;\n      }\n      // Display value with action sign when action sign is clicked after display result\n      else if (document.querySelector('.clearAll')\n        && actOperators.some(equal(value))\n      ) {\n        allAction.classList.remove('clearAll');\n        finishResult.classList.remove('clearAll');\n\n        // Set new value in fields 'allAction' and 'finishResult'\n        finishResult.innerHTML = value;\n      }\n      // Display value with decimal sign when decimal sign is clicked after display result \n      else if (document.querySelector('.clearAll')\n        && value === '.') {\n        allAction.classList.remove('clearAll');\n        finishResult.classList.remove('clearAll');\n\n        // Set new value in fields 'allAction' and 'finishResult'\n        finishResult.innerHTML += value;\n      }\n      // Display only action sign in actual field\n      else if (actOperators.some(equal(value))) {\n        // Set new value in 'finishResult' field\n        finishResult.innerHTML = value;\n\n        // Remove disabled attribute from number, decimal and equals buttons after click button with action\n        decimal.removeAttribute('disabled');\n        equals.removeAttribute('disabled');\n\n        if (disabledNum) {\n          // Remove disabled attribute from buttons\n          disabledNum.removeAttribute('disabled');\n        }\n      }\n      // Check if element with class 'clearAll' exists when button with number is clicked\n      else if (document.querySelector('.clearAll')\n        && actOperators.every(notEqual(value))\n        && value !== 'AC'\n        && value !== '=') {\n        allAction.classList.remove('clearAll');\n        finishResult.classList.remove('clearAll');\n\n        // Set new value in fields 'allAction' and 'finishResult'\n        allAction.innerHTML = value;\n        finishResult.innerHTML = value;\n      }\n\n      // Display all value if clicked is button with number\n      else if (actOperators.some(notEqual(value))\n        || value !== 'AC'\n        || value !== '=') {\n        // Add new value to 'finishResult' field\n        finishResult.innerHTML += value;\n      }\n      else {\n        // Remove attribute disabled from equals button \n        equals.removeAttribute('disabled');\n        // Add new value to 'finishResult' field\n        finishResult.innerHTML += value;\n      };\n\n      // Handles for value of 'allAction' and 'finishResult' fields\n      let result = allAction.firstChild.nodeValue;\n      let actual = finishResult.firstChild.nodeValue;\n\n      // Check length of introduced number\n      if (actual.length > 10 && e.target.attributes[1].value === 'small num') {\n        // If checked length is too long, block posibilities to put next sign\n        e.target.setAttribute('disabled', 'true');\n      } else {\n        e.target.removeAttribute('disabled');\n      }\n\n      // Set states of application\n      this.setState({\n        result: result,\n        actual: actual\n      });\n\n      // Functionality for '=' button\n      if (value === '=') {\n\n        // Add class 'clearAll' to 'allAction' and 'finishResult' fields\n        allAction.classList.add('clearAll');\n        finishResult.classList.add('clearAll');\n\n        // Define parser with expr-eval\n        let Parser = require('expr-eval').Parser;\n\n        // Handle for result\n        let score = Parser.evaluate(this.state.result);\n\n        // Add attribute disabled to equals button \n        equals.setAttribute('disabled', 'true');\n\n        // Condition for result of except with 0.1+0.2 in JS\n        if (allAction.firstChild.nodeValue === '0.1+0.2='\n          || allAction.firstChild.nodeValue === '0.2+0.1='\n          || allAction.firstChild.nodeValue === '.1+.2='\n          || allAction.firstChild.nodeValue === '0.1+.2='\n          || allAction.firstChild.nodeValue === '.1+0.2='\n          || allAction.firstChild.nodeValue === '0.2+.1='\n          || allAction.firstChild.nodeValue === '0.1+.2='\n          || allAction.firstChild.nodeValue === '.2+.1=') {\n          score = score.toFixed(1); // 0.3\n        }\n\n        // Handle for length of result\n        let scoreStr = score.toString();\n        let strLength = scoreStr.length;\n\n        // Functionality for long numbers\n        if (strLength > 15) {\n          // If result number is too long, shorten it\n          let shortScore = score.toPrecision(15);\n          this.setState({\n            result: shortScore,\n            actual: shortScore\n          });\n\n        } else {\n          this.setState({\n            result: score,\n            actual: score\n          });\n        }\n      }\n    }\n    e.stopPropagation();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Display\n            result={this.state.result}\n            actual={this.state.actual}\n          />\n          <Form\n            displayVal={this.displayVal}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/style.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}